import org.junit.Test;
import ru.anani.lesson15.refactoring.Orientation;
import ru.anani.lesson15.refactoring.Tractor;
import ru.anani.lesson15.refactoring.TractorInDitchException;

public class RefactoringTest {
    Tractor tractor = new Tractor();

    @Test
    public void moveClockwise() {
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 0);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 0);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 0);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 0);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 0);
    }

    @Test(expected = TractorInDitchException.class)
    public void moveForwardToField() {
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 1);
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 2);
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 3);
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 4);
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 5);
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 6);
    }

    @Test(expected = TractorInDitchException.class)
    public void moveForwardClockwiseToField(){
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 0);
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 1);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == 0);
        assert (tractor.getPositionY() == 1);
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == 1);
        assert (tractor.getPositionY() == 1);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 1);
        assert (tractor.getPositionY() == 1);
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 1);
        assert (tractor.getPositionY() == -1);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == 1);
        assert (tractor.getPositionY() == -1);
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == -1);
        assert (tractor.getPositionY() == -1);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -1);
        assert (tractor.getPositionY() == -1);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -1);
        assert (tractor.getPositionY() == 2);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == -1);
        assert (tractor.getPositionY() == 2);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == 2);
        assert (tractor.getPositionY() == 2);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 2);
        assert (tractor.getPositionY() == 2);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 2);
        assert (tractor.getPositionY() == -2);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == 2);
        assert (tractor.getPositionY() == -2);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == -2);
        assert (tractor.getPositionY() == -2);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -2);
        assert (tractor.getPositionY() == -2);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -2);
        assert (tractor.getPositionY() == 3);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == -2);
        assert (tractor.getPositionY() == 3);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == 3);
        assert (tractor.getPositionY() == 3);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 3);
        assert (tractor.getPositionY() == 3);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 3);
        assert (tractor.getPositionY() == -3);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == 3);
        assert (tractor.getPositionY() == -3);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == -3);
        assert (tractor.getPositionY() == -3);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -3);
        assert (tractor.getPositionY() == -3);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -3);
        assert (tractor.getPositionY() == 4);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == -3);
        assert (tractor.getPositionY() == 4);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == 4);
        assert (tractor.getPositionY() == 4);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 4);
        assert (tractor.getPositionY() == 4);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 4);
        assert (tractor.getPositionY() == -4);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == 4);
        assert (tractor.getPositionY() == -4);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == -4);
        assert (tractor.getPositionY() == -4);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -4);
        assert (tractor.getPositionY() == -4);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -4);
        assert (tractor.getPositionY() == 5);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == -4);
        assert (tractor.getPositionY() == 5);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.EAST));
        assert (tractor.getPositionX() == 5);
        assert (tractor.getPositionY() == 5);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 5);
        assert (tractor.getPositionY() == 5);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.SOUTH));
        assert (tractor.getPositionX() == 5);
        assert (tractor.getPositionY() == -5);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == 5);
        assert (tractor.getPositionY() == -5);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.WEST));
        assert (tractor.getPositionX() == -5);
        assert (tractor.getPositionY() == -5);
        tractor.move("T");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -5);
        assert (tractor.getPositionY() == -5);
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        tractor.move("F");
        assert (tractor.getOrientation().equals(Orientation.NORTH));
        assert (tractor.getPositionX() == -5);
        assert (tractor.getPositionY() == 6);
    }
}
